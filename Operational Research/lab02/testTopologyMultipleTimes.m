%% testTopologyMultipleTimes
% function [sol_algorithm, topology] = testTopologyMultipleTimes (trf_m, number_nodes,n_tries, n_delta, check, probability)
% This function returns the best topology (i.e. the one with lowest
% max_flow) among n_tries different topologies, generated according to our
% algorithm and given a traffic matrix and the number of transmitters/receivers. 
% It is possible to change different parameters in order to test different
% possible results.

function [sol_algorithm, topology, min_connected, is_connected] = testTopologyMultipleTimes (trf_m, number_nodes,n_tries, n_delta, check, probability)

if nargin == 5
    n_check = check;
    p = 0.1;
elseif nargin == 6
    n_check = check;
    p = probability;
else
    n_check = 3;
    p = 0.1;
end
    
    connected = zeros(1,n_tries);

for count=1:n_tries
    [bij, arcs] = generate_flow_matrix_bis(number_nodes, n_delta, p, n_check, trf_m);
    [flow_matrix_bij, max_flow_bij] = route_by_shortest_path (bij, arcs, number_nodes, trf_m);
    bij_array(:,:,count) = flow_matrix_bij;
    array_bij(count) = max_flow_bij;
    
    bins = conncomp (digraph(bij));
    if sum(bins) == number_nodes
        connected(count) = 1;
    end
end

% s = sprintf('n of connected topologies generated by the algorithm = %.0f', sum(connected));
% disp(s);

sol_algorithm = array_bij;
I = find(min(array_bij) == array_bij, 1 );

%% Check topology connected
% Here the best connected topology is chosen among all the connected
% topologies. In case there are no connected topologies, the best topology
% with no constraints is chosen. 
if (sum(connected) > 0)
    I = find(min(array_bij(find(connected>0))) == array_bij, 1 );
    is_connected = 1;
else
    I = find(min(array_bij) == array_bij, 1 );
    is_connected = 0;
end    
min_connected = I;

topology = bij_array (:,:,I);

% figure, plot(digraph(topology))